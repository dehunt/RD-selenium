# NOTE: Expected format is TYPE:::VALUE
# Update zObjectMap.java with the path to this file
#
# === Login page objects ===
rd.login.password=id:::password
rd.login.submit=xpath::://button[contains(.,'Log in')]
rd.login.username=id:::login
#
# === Admin console, submit / confirm button ===
rd.admin.commit=name:::commit
#
# === Admin console, top toolbar objects ===
rd.admin.dash=id:::dashboard
rd.admin.newUser=xpath::://*[contains(@href,'/admin/users/new')]
rd.admin.userMenu=id:::users
rd.admin.users=xpath::://*[contains(@href,'/admin/users')]
#
# === Admin Console, new/edit user objects ===
rd.nUser.email=id:::user_email
rd.nUser.eula=id:::user_accepted_eula
rd.nUser.full=id:::user_full_name
rd.nUser.password=id:::user_password
rd.nUser.passconf=id:::user_password_confirmation
#rd.nUser.roles=id:::user_role_ids
rd.nUser.roles=id:::user_role_name
#
# === Admin Console, "View User" objects ===
rd.vUser.id=xpath::://div[@class='attributes_table user']/table/tbody/tr[@class='row row-id']/td
#
# === Web Portal, book details UI objects ===
rd.bookDetails.backButton=id:::bookshelf-show-detail-navbar
rd.bookDetails.bookContent=id:::bookshelf-show-detail-content
rd.bookDetails.bookSettings=className:::settings-button
#
# === Web Portal, book upload objects ===
rd.upload.acceptUsage=id:::accept-usage-terms
rd.upload.bookAuthor=id:::book-author
rd.upload.bookCategory=id:::dropdown-menu
rd.upload.bookContent=id:::content-section
rd.upload.bookDataSection=id:::book-data-section
rd.upload.bookDesc=id:::book-description
rd.upload.bookName=id:::book-name
rd.upload.bookPermissionSection=id:::permissions-section
# changeButton is the "Change" button when uploading a book. Pick the correct section using a WebElement,
#       then click the "Change button off that element
rd.upload.changeButton=cssSelector:::.btn.btn-primary.section-button
rd.upload.deleteButton=cssSelector:::.btn.btn-danger.delete-button
rd.upload.deleteConfirmButton=cssSelector:::.btn.btn-danger.confirm-button
rd.upload.fadeIn=cssSelector:::.modal.fade.in
rd.upload.fileSelector=className:::file-chooser-input
rd.upload.submit=cssSelector:::.btn.btn-primary.confirm-button
#
# === Web portal, people panel
rd.people.contacts=cssSelector:::.contacts-container.row
rd.people.confirmDelete=cssSelector:::.btn.btn-danger.confirm-button
rd.people.deleteButton=className:::delete-button
rd.people.email=name:::email
rd.people.new=className:::new-button
rd.people.tab=id:::people-tab
#
# === Web Portal, library UI objects ===
rd.libUi.bookshelf=className:::collection-container
#rd.libUi.bookUpload=className:::content-container
rd.libUi.bookUpload=className:::item-upload-text
rd.libUi.lastPage=className:::page-link last-page-link
rd.libUi.logo=className:::logo-replace
rd.libUi.loading=className:::loading
rd.libUi.myBookshelf=id:::bookshelf-tab
rd.libUi.searchBox=name:::query
rd.libUi.tutorial=id:::tutorial-modal
rd.libUi.tutClose=id:::close-tip-btn
#
# === Web Portal, read view navigation objects ===
# blocking-loading-layer is the layer shows the progress info when a book is first loading
rd.reader.block=id:::blocking-loading-layer
# div.drawer.hwacceled is the opened chapter side panel
rd.reader.chDrawer=cssSelector:::div.drawer.hwacceled
# epubContentIframe is the frame that contains the epub, and changes from opacity 0.1 to 1 when loaded
rd.reader.contentFrame=id:::epubContentIframe
rd.reader.fixedEpubContentFrame=id:::fixed-book-frame
rd.reader.load=className:::loading-container
rd.reader.loadingLayer=className:::loadingLayer
rd.reader.next=id:::nextPageBtn
rd.reader.prev=id:::prevPageBtn
rd.reader.spin=cssSelector:::.spinGif
rd.reader.tocToggle=id:::tocToggle
